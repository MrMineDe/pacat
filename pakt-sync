#!/bin/sh
# Pakt (PAcman KaTegories) - Pacman wrapper for categorizing packages
# v0.0.1 GPL-2.0
# https://github.com/mrminede/pakt

# Help message part.
if [ "$#" -eq 0 ] || [ "${1:-}" = "--help" ] || [ "${1:-}" = "-h" ]; then
	echo "PAKT-SYNC: shamelessly redirecting you to the man page ..."
	sleep 2
	man pakt-sync
	exit
fi

# Strict mode. The script will throw an error on an unbound variable encounter.
set -u

# Check whether the data path was defined with XDG.
if [ -z "${XDG_DATA_HOME:-}" ]; then
	DATA_PATH="$HOME/.local/share/pakt"
else
	DATA_PATH="$XDG_DATA_HOME/pakt"
fi
mkdir -p "$DATA_PATH"

# Control/set config path variable.
if [ -z "${PAKT_CONF_PATH:-}" ]; then
	PAKT_CONF_PATH="/etc"
fi

# Check whether pakt.conf exists in the first place.
if [ ! -e "$PAKT_CONF_PATH/pakt.conf" ]; then
	echo "PAKT: ERROR: /etc/pakt.conf not found."
	exit 1
fi

. "$PAKT_CONF_PATH/pakt.conf"

# Process variables
FLAG=""
FILES=""
CATS=""
PKGS=""

for arg in "$@"; do
	case "$arg" in
		"-"*)
			FLAG="${FLAG}${arg}"
			;;
		"+"*)
			CATS="${CATS} ${arg}"
			;;
		*)
			FILES="${FILES} ${arg}"
			;;
	esac
done

for file in $(echo "$FILES" | tr ' ' '\n'); do
	# The awk command cuts comments (hash characters and everything after them)
	# and merges all lines into one.
	file_pkgs=$(awk '!/^#/ { sub(/#.*/, ""); printf "%s ", $0 }' "$file")
	PKGS="${PKGS} ${file_pkgs}"
done

for cat in $(echo "$CATS" | tr ' ' '\n'); do
	# See comment above.
	cat_pkgs=$(awk '!/^#/ { sub(/#.*/, ""); printf "%s ", $0 }' "$DATA_PATH/${cat#+}")
	PKGS="${PKGS} ${cat_pkgs}"
done

case "$FLAG" in
	"")
		for pkg in $(echo "$PKGS" | tr ' ' '\n'); do
			if ! pacman -Qs "$pkg" > /dev/null; then
				echo "$pkg"
			fi
		done
		;;
	"-S"|"--sync")
		eval "$PACKAGE_MANAGER -S $PKGS"
		;;
	"-R"|"--remove")
		eval "$PACKAGE_MANAGER -Rcnsu $PKGS"
		;;
	*)
		echo "PAKT-SYNC: ERROR: invalid flag(s): '$FLAG'"
		exit 1
		;;
esac
