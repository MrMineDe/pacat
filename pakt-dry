#!/bin/sh
# Pakt (PAcman KaTegories) - Pacman wrapper for categorizing packages
# v0.0.1 GPL-2.0
# https://github.com/mrminede/pakt

# Help message part.
if [ "$#" -eq 0 ] || [ "${1:-}" = "--help" ] || [ "${1:-}" = "-h" ]; then
	echo "PAKT: shamelessly redirecting you to the manpage ..."
	sleep 3
	man pakt-dry
	exit
fi

# Process variables
FLAG=""
REST=""

# Strict mode. The script will throw an error on an unbound variable encounter.
set -u

# Check whether the data path was defined with XDG.
if [ -z "${XDG_DATA_HOME:-}" ]; then
	DATA_PATH="$HOME/.local/share/pakt"
else
	DATA_PATH="$XDG_DATA_HOME/pakt"
fi
mkdir -p "$DATA_PATH"

# Control/set config path variable.
if [ -z "${PAKT_CONF_PATH:-}" ]; then
	PAKT_CONF_PATH="/etc/pakt.conf"
fi

# Create new pakt.conf if none exists.
if [ ! -e "$PAKT_CONF_PATH" ]; then
	echo "PAKT: ERROR: /etc/pakt.conf not found."
	exit 1
fi

. "$PAKT_CONF_PATH"

for arg in "$@"; do
	case "$arg" in
		-*)
			if [ -n "$FLAG" ]; then
				"PAKT: ERROR: pakt only takes one flag. Exiting ..."
				exit 1
			fi
			FLAG="$arg"
			;;
		*)
			REST="${REST} ${arg}"
	esac
done

if [ "$FLAG" = "" ]; then
	for arg in $(echo "$REST" | tr ' ' '\n'); do
		echo -e "$arg\n--------------------"
		case "$arg" in
			"+"*)
				cat "$DATA_PATH/${arg#+}"
				;;
			*)
				cat "$arg"
				;;
		esac
		echo
	done

	exit
fi

# From this point on, pakt-dry applies the same logic as in pakt to (de-)categorize the packages.

PKGS=""
CATS="$DEFAULT_CATEGORIES"
TRANSACTION_READY=1

# Save all the packages for a group of categories temporarily in /tmp.
# This is needed, because we allow different categories for different packages.
# We could do this with an array of some sort, but would lose POSIX-compliancy.
pkg_tempsave() {
	for cat in $(echo "$CATS" | tr ' ' '\n'); do
		for pkg in $PKGS; do
			echo "$pkg" >> /tmp/pakt-dry/"$cat"
		done
	done

	PKGS=""
	CATS="$DEFAULT_CATEGORIES"
}

# Temporary path storing new package and category data.
mkdir -p "/tmp/pakt-dry"

for arg in $(echo "$REST" | tr ' ' '\n'); do
	case "$arg" in
		"++")
			CATS=$(ls "$DATA_PATH")
			;;
		"+"*)
			arg=$(echo "$arg" | tr ',' ' ')
			CATS="${CATS} ${arg#+}"

			# This is used to detect when a package is declared after a category.
			# When that happens, we want to first save the package and category data before resetting both.
			TRANSACTION_READY=0
			;;
		*)
			# See comment above.
			if [ "$TRANSACTION_READY" -eq 0 ]; then
				pkg_tempsave
				TRANSACTION_READY=1
			fi

			PKGS="${PKGS} ${arg}"
			;;
	esac
done

# Save the last packages.
pkg_tempsave

# Omits the rest of the script if no category tomfoolery was performed.
if [ ! "$(ls /tmp/pakt-dry)" ]; then
	exit
fi

for tmpfile in /tmp/pakt-dry/*; do
	catfile=$DATA_PATH/`basename $tmpfile`
	touch $catfile

	for pkg in $(cat "$tmpfile"); do
		if [ "$FLAG" = "-r" ]; then
			# Remove package from category file.
			# You can't pipe directly into tmpfile because it would encounter an empty file.
			sed -i "/^$pkg$/d" "$catfile"
		elif [ "$pkg" != "$(grep "^$pkg\$" "$catfile")" ]; then
			# Add package to category file, if not already there.
			echo "$pkg" >> "$catfile"
		fi
	done
done

# At last we want to clean up, so we don't work on the packages from last time.
rm -r "/tmp/pakt-dry"

# Clears empty catfiles from DATA_PATH. See the third setting in your `pakt.conf`.
if [ "$REMOVE_EMPTY_CATFILES" -eq 1 ]; then
	find "$DATA_PATH" -type f -empty -delete
fi
