#!/bin/sh
# Pakt (PAcman KaTegories) - Pacman wrapper for categorizing packages
# TODO VERSION GPL-2.0
# https://github.com/mrminede/pakt

# Save all the packages for a group of categories temporarily in /tmp.
# This is needed, because we allow different categories for different packages.
# We could do this with an array of some sort, but would lose POSIX-compliancy.
pkg_tempsave() {
	for c in $(echo "$CAT" | tr ' ' '\n'); do
		for p in $PAC; do
			echo "$p" >> /tmp/pakt/"$c"
		done
	done

	PAC=""
	CAT="$DEFAULT_CATEGORIES"
}

if [ "$#" -eq 0 ] || [ "$1" = "--pakt-help" ]; then
	echo "Pakt (PAcman KaTegories) - Pacman wrapper for categorizing packages

Usage: pakt (pacman/aur helper flags) package ... [+category] ...
    # TODO change help flag here
    or pakt --help
    or pakt -h

Examples:
    # Just use pakt as a pacman/AUR helper wrapper
    pakt -S neovim

    # Installs neovim and assigns it to the \"editors\" category
    pakt -S neovim +editors

    # Performs system update, installs htop and lf both in the \"cli\" category,
    # firefox in \"basic\" but git in none
    pakt -Syu htop lf +cli firefox +basic git"

	exit
fi

# Source the config file.
# Define the location where we search for the config file.
# TODO LOCAL ARGUE keep either CONF_PATH variable
ACTIVATE_DEF_CONF=0
if [ -z "$PAKT_CONFIG_PATH" ]; then
	if [ -z "$XDG_CONFIG_HOME" ]; then
		CONF_PATH="$XDG_CONFIG_HOME/pakt/pakt.conf"
	else
		CONF_PATH="$HOME/.config/pakt/pakt.conf"
	fi
else
	CONF_PATH="$PAKT_CONFIG_PATH"
fi

# Now check if config file is there and load it.
if [ -e "$CONF_PATH" ]; then
	. "$CONF_PATH"
else
	ACTIVATE_DEF_CONF=1
fi

if [ $ACTIVATE_DEF_CONF -eq 1 ]; then
	CAT="default"
	CMD="pacman"
	if [ -z "$XDG_DATA_HOME" ]; then
		PTH="$HOME/.local/share/pakt"
	else
		PTH="$XDG_DATA_HOME/pakt"
	fi
	MODE=""
else
	# shorten the config variable names
	CMD="$PACKAGE_MANAGER"
	CAT="$DEFAULT_CATEGORIES"
	PTH="$PAKT_PATH"
fi

PAC=""
ARG_WAS_CAT=0

# We need this dir in pkg_tempsave().
mkdir -p /tmp/pakt

# TODO LOCAL ASK "-C"?
# This is used to save the state of -C argument, to store the ARG after -C.
for A in "$@"; do
	case "$A" in
		-*)
			# TODO LOCAL ARGUE can you merge both case-ins?
			case "$A" in
				*S*)
					MODE="S"
					CMD="${CMD} ${A}"
				;;
				*R*)
					MODE="R"
					CMD="${CMD} ${A}"
				;;
				*)
					CMD="${CMD} ${A}"
				;;
			esac
		;;
		"+"*)
			# This allows the syntax of: +cat1,cat2,test,cli
			A=$(echo "$A" | tr ',' ' ')
			CAT="${CAT} ${A#+}"
			# ARG_WAS_CAT is used to detect, when a package is declared after a category.
			# When that happens we want to first save the packages before to the categories before and then reset both.
			ARG_WAS_CAT=1
		;;
		*)
			if [ $ARG_WAS_CAT -eq 1 ]; then
				pkg_tempsave
				ARG_WAS_CAT=0
			fi
			CMD="${CMD} ${A}"
			PAC="${PAC} ${A}"
		;;
	esac
done

# Save the last packages
pkg_tempsave

# Execute pacman
if ! $CMD ; then
	echo "Pacman returned a fail. Exiting..."
	exit
fi

# Check if a mode we care about was used. Otherwise the package manager was probably used to perform some other non-installing/removing action we don't care about.
if [ -z "$MODE" ]; then
	exit;
fi

# Create path if it doesn't exist
mkdir -p "$PTH"
for f in /tmp/pakt/*; do
	# We don't want f to be /tmp/pakt/filename, but rather only filename.
	f=$(basename "$f")
	# This will make sure, that there are no error messages about a category file not existing.
	# These errors are not fatal, but the user should not see them!
	touch "$PTH/$f"
	for p in $(cat "/tmp/pakt/$f"); do
		case $MODE in
			S) # Add Package
				# Check if package is already in file, then don't add it.
				if [ "$p" != "$(grep "^$p\$" "$PTH/$f")" ]; then
					echo "$p" >> "$PTH/$f"
				fi
				;;
			R) # Remove Package
				sed -n "/^$p\$/"'!'"p" "$PTH/$f" | tee "$PTH/$f" > /dev/null # You can't pipe directly into PTH/f bc the pipe is opened first, therefore the file is beeing cleared, therefore sed opens a empty file.
				;;
		esac
	done
done

# At last we want to clean up, so we don't work on the packages from last time.
rm /tmp/pakt -r
